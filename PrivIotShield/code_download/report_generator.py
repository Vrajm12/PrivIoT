import os
import json
from openai import OpenAI
from app import app
from markupsafe import Markup

# The newest OpenAI model is "gpt-4o" which was released May 13, 2024.
# do not change this unless explicitly requested by the user
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai = OpenAI(api_key=OPENAI_API_KEY)


def generate_report(scan, report_type):
    """
    Generate a security report based on scan results.
    
    Args:
        scan: Scan object from the database
        report_type: Type of report (detailed, summary, executive)
    
    Returns:
        str: HTML report content
    """
    try:
        # Get scan data from the database
        scan_data = scan.get_scan_data()
        
        # Prepare report data
        report_data = {
            "scan_id": scan.id,
            "scan_date": scan.scan_date.strftime("%Y-%m-%d %H:%M:%S"),
            "device": {
                "id": scan.device.id,
                "name": scan.device.name,
                "type": scan.device.device_type,
                "manufacturer": scan.device.manufacturer,
                "model": scan.device.model,
                "firmware_version": scan.device.firmware_version,
                "ip_address": scan.device.ip_address,
                "mac_address": scan.device.mac_address
            },
            "security_score": scan.security_score,
            "privacy_score": scan.privacy_score,
            "overall_score": scan.overall_score,
            "risk_level": scan.risk_level,
            "vulnerabilities": [
                {
                    "id": vuln.id,
                    "name": vuln.name,
                    "description": vuln.description,
                    "severity": vuln.severity,
                    "cvss_score": vuln.cvss_score,
                    "cvss_vector": vuln.cvss_vector,
                    "status": vuln.status,
                    "recommendation": vuln.recommendation
                }
                for vuln in scan.vulnerabilities
            ],
            "privacy_issues": [
                {
                    "id": issue.id,
                    "name": issue.name,
                    "description": issue.description,
                    "severity": issue.severity,
                    "privacy_impact": issue.privacy_impact,
                    "status": issue.status,
                    "recommendation": issue.recommendation
                }
                for issue in scan.privacy_issues
            ],
            "scan_data": scan_data
        }
        
        # Generate appropriate report based on type
        if report_type == "detailed":
            return generate_detailed_report(report_data)
        elif report_type == "summary":
            return generate_summary_report(report_data)
        elif report_type == "executive":
            return generate_executive_report(report_data)
        else:
            return generate_summary_report(report_data)  # Default to summary
            
    except Exception as e:
        app.logger.error(f"Error generating report: {str(e)}")
        return f"<p>Error generating report: {str(e)}</p>"


def generate_detailed_report(report_data):
    """
    Generate a detailed security report using AI.
    
    Args:
        report_data: Data for the report
    
    Returns:
        str: HTML report content
    """
    try:
        report_data_json = json.dumps(report_data)
        
        prompt = f"""
        Generate a comprehensive, detailed HTML report for an IoT device security assessment 
        with the following data:
        
        {report_data_json}
        
        The report should include:
        1. Executive summary at the top
        2. Device information section
        3. Detailed risk assessment with charts/tables
        4. Complete vulnerability analysis (for each identified vulnerability)
        5. Privacy analysis (for each privacy issue)
        6. Detailed recommendations section
        7. Technical appendix with raw data
        
        Use proper HTML formatting with Bootstrap 5 classes for styling.
        Include appropriate headings, tables, and sections.
        Use appropriate colors for risk levels (red for critical, orange for high, etc.)
        Include placeholders for charts that would need to be generated by client-side JavaScript.
        
        Return ONLY the HTML content, no markdown or other formatting.
        """
        
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a security report generator that creates detailed HTML reports for IoT security assessments."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2,
            max_tokens=4000
        )
        
        # Return HTML content as a Markup object to prevent escaping
        html_content = response.choices[0].message.content
        return Markup(html_content)
    
    except Exception as e:
        app.logger.error(f"Error generating detailed report: {str(e)}")
        return f"<p>Error generating detailed report: {str(e)}</p>"


def generate_summary_report(report_data):
    """
    Generate a summary security report using AI.
    
    Args:
        report_data: Data for the report
    
    Returns:
        str: HTML report content
    """
    try:
        report_data_json = json.dumps(report_data)
        
        prompt = f"""
        Generate a concise, executive summary HTML report for an IoT device security assessment 
        with the following data:
        
        {report_data_json}
        
        The report should include:
        1. Brief executive summary
        2. Key device information
        3. Summary of security and privacy scores with risk level
        4. High-level findings (top 3-5 vulnerabilities)
        5. Key recommendations
        
        Use proper HTML formatting with Bootstrap 5 classes for styling.
        Include appropriate headings, tables, and sections.
        Use appropriate colors for risk levels (red for critical, orange for high, etc.)
        Include placeholders for simple charts/gauges that would be generated by client-side JavaScript.
        
        Keep the content concise and focused on the most important information.
        Return ONLY the HTML content, no markdown or other formatting.
        """
        
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a security report generator that creates concise HTML summary reports for IoT security assessments."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2,
            max_tokens=2000
        )
        
        # Return HTML content as a Markup object to prevent escaping
        html_content = response.choices[0].message.content
        return Markup(html_content)
    
    except Exception as e:
        app.logger.error(f"Error generating summary report: {str(e)}")
        return f"<p>Error generating summary report: {str(e)}</p>"


def generate_executive_report(report_data):
    """
    Generate an executive security report using AI.
    
    Args:
        report_data: Data for the report
    
    Returns:
        str: HTML report content
    """
    try:
        report_data_json = json.dumps(report_data)
        
        prompt = f"""
        Generate a concise, executive-level HTML report for an IoT device security assessment 
        with the following data:
        
        {report_data_json}
        
        The report should include:
        1. Very brief overview (2-3 sentences)
        2. Key risk metrics and overall score
        3. Business impact assessment
        4. Top findings (limit to most critical 2-3 issues)
        5. Strategic recommendations (focus on business implications)
        
        Use proper HTML formatting with Bootstrap 5 classes for styling.
        Include appropriate headings and minimal tables.
        Use appropriate colors for risk levels (red for critical, orange for high, etc.)
        Include placeholders for simple visualizations.
        
        Keep the content extremely concise, non-technical, and business-focused.
        Use language appropriate for C-level executives.
        Return ONLY the HTML content, no markdown or other formatting.
        """
        
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a security report generator that creates executive-level HTML reports for IoT security assessments. Your reports are concise, business-focused, and avoid technical jargon."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2,
            max_tokens=1500
        )
        
        # Return HTML content as a Markup object to prevent escaping
        html_content = response.choices[0].message.content
        return Markup(html_content)
    
    except Exception as e:
        app.logger.error(f"Error generating executive report: {str(e)}")
        return f"<p>Error generating executive report: {str(e)}</p>"